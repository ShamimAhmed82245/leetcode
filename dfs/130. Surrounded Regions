class Solution {
public:

    void dfs(int i,int j,vector<vector<char>>& board)
    {
        if(i<0||j<0||i>=board.size()||j>=board[0].size()||board[i][j]!='O') return;
        board[i][j]='B';
        dfs(i,j-1,board);
        dfs(i,j+1,board);
        dfs(i+1,j,board);
        dfs(i-1,j,board);
    }       
    void solve(vector<vector<char>>& board) {
        int n=board.size();
        int m=board[0].size();
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++)
            {
                if(i==0||i==n-1){
                    if(board[i][j]=='O'){
                        dfs(i,j,board);
                    }
                }
                if(j==0||j==m-1){
                    if(board[i][j]=='O'){
                        dfs(i,j,board);
                    }
                }
            }
        }
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++)
            {
                if(board[i][j]=='B'){
                    board[i][j]='O';
                }
                else{
                    board[i][j]='X';
                }
            }
            //cout<<endl;
        }
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++)
            {
                cout<<board[i][j]<<" "; 
            }
            cout<<endl;
        }
        //return board;
    }
};
