class Solution {
public:

    int findMaxFish(vector<vector<int>>& grid) {
        int n=grid.size();
        int m=grid[0].size();

        int ans=0,sum=0;
        
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<m;j++)
            {
                sum=0;
                if(grid[i][j]>0){
                    queue<pair<int,int>>q;
                    q.push({i,j});
                    sum+=grid[i][j];
                    grid[i][j]=0;
                    while(!q.empty())
                    {
                        int r=q.front().first;
                        int c=q.front().second;
                        //q.pop();
                        cout<<r<<" "<<c<<endl;
                        //sum+=grid[r][c];
                        if(c>0&&grid[r][c-1]!=0){
                            sum+=grid[r][c-1];
                            q.push({r,c-1});  
                            grid[r][c-1]=0;                          
                        }
                        if(c+1<m&&grid[r][c+1]!=0){
                            sum+=grid[r][c+1];
                            q.push({r,c+1});
                            grid[r][c+1]=0;
                        }
                        
                        if(r+1<n&&grid[r+1][c]!=0){
                            sum+=grid[r+1][c];
                            q.push({r+1,c});
                            grid[r+1][c]=0;
                        }
                        
                        if(r>0&&grid[r-1][c]!=0){
                            sum+=grid[r-1][c];
                            q.push({r-1,c});
                            grid[r-1][c]=0;
                        }
                        q.pop();
                    }
                }
                ans=max(ans,sum);
            }
        }
        return ans;
    }
};
