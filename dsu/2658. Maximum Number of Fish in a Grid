class Solution {
public:
int parent[1000];
int sz[1000]; 

void make(int v){
    parent[v] = v;
    //sz[v]=1;
}

int find(int v){
    if(v==parent[v]) return v;
    return parent[v]=find(parent[v]);//path compression
}

void Union(int a, int b){
    a=find(a);
    b=find(b);
    if(a!=b){
        //union by size
        if(sz[a]<sz[b]){
            swap(a,b);
        }
        parent[b]=a;
        sz[a]+=sz[b];
    }
}


    int findMaxFish(vector<vector<int>>& grid) {
        int n=grid.size();
        int m=grid[0].size();

        int sze=n*m+10;
        for(int i=0;i<sze;i++)
        {
            make(i);
        }
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<m;j++)
            {
                int y=i*m+j;
                sz[y]=grid[i][j];
            }
        }
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<m;j++)
            {
                if(grid[i][j]!=0){
                    if(i>0&&grid[i-1][j]!=0) Union(i*m+j,(i-1)*m+j);
                    if(j>0&&grid[i][j-1]!=0) Union(i*m+j,i*m+j-1);
                }
            }
        }
        int ans=0;
        for(int i=0;i<sze;i++)
        {
            ans=max(ans,sz[i]);
        }
        return ans;
    }
};
